import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import stripe
import asyncio

# تنظیمات اولیه
API_TOKEN = '7656948861:AAGQoIcAeEMar0LC2XGPLRvwUBjsu1P8ewc'  # جایگزین با توکن واقعی
STRIPE_SECRET_KEY = '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'

# تنظیم کلید Stripe
stripe.api_key = STRIPE_SECRET_KEY

# تنظیم لاگ‌ها
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# دستور /start
def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        'سلام! من ربات بررسی کارت هستم.\nبرای بررسی کارت، دستور /chk را به همراه اطلاعات کارت ارسال کنید.\n\nفرمت دستور:\n/chk <شماره کارت>,<ماه انقضا>,<سال انقضا>,<CVC>'
    )

# دستور /help
def help_command(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        'برای استفاده از من، دستور زیر را به همراه اطلاعات کارت خود ارسال کنید:\n\n'
        '/chk <شماره کارت>,<ماه انقضا>,<سال انقضا>,<CVC>\n\n'
        'مثال:\n/chk 4242424242424242,12,2025,123'
    )

# تابع بررسی کارت
async def check_card(card):
    card_number, exp_month, exp_year, cvc = card
    try:
        # ایجاد PaymentMethod
        payment_method = stripe.PaymentMethod.create(
            type="card",
            card={
                "number": card_number,
                "exp_month": exp_month,
                "exp_year": exp_year,
                "cvc": cvc,
            },
        )

        # ایجاد PaymentIntent
        payment_intent = stripe.PaymentIntent.create(
            amount=100,  # 1.00 دلار
            currency='usd',
            payment_method=payment_method.id,
            confirmation_method='manual',
            confirm=True,
        )

        if payment_intent.status in ['requires_action', 'requires_confirmation']:
            result = "کارت نیاز به اقدامات اضافی دارد. ممکن است نیاز به احراز هویت داشته باشد."
        elif payment_intent.status == 'succeeded':
            result = "کارت معتبر و تایید شده است."
        else:
            result = f"وضعیت PaymentIntent: {payment_intent.status}"

    except stripe.error.CardError as e:
        # کارت نامعتبر
        result = f"کارت نامعتبر است: {e.user_message}"
    except Exception as e:
        # سایر خطاها
        result = f"خطایی رخ داده است: {str(e)}"

    return f"کارت {card_number}: {result}"

# مدیریت دستور /chk
def chk_command(update: Update, context: CallbackContext) -> None:
    user_input = ' '.join(context.args)
    if not user_input:
        update.message.reply_text("لطفاً اطلاعات کارت را پس از دستور /chk وارد کنید.\nمثال:\n/chk 4242424242424242,12,2025,123")
        return

    parts = user_input.split(',')
    if len(parts) != 4:
        update.message.reply_text("فرمت نامعتبر. لطفاً اطلاعات کارت را به صورت زیر وارد کنید:\n/chk <شماره کارت>,<ماه انقضا>,<سال انقضا>,<CVC>")
        return

    card_number, exp_month, exp_year, cvc = [part.strip() for part in parts]

    # اعتبارسنجی اولیه ورودی‌ها
    if not (card_number.isdigit() and exp_month.isdigit() and exp_year.isdigit() and cvc.isdigit()):
        update.message.reply_text("لطفاً از وارد کردن اعداد صحیح برای شماره کارت، ماه، سال و CVC اطمینان حاصل کنید.")
        return

    card = (card_number, int(exp_month), int(exp_year), cvc)

    # اجرای بررسی کارت‌ها به صورت ناهمزمان
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    result = loop.run_until_complete(check_card(card))
    loop.close()

    # ارسال نتیجه به کاربر
    update.message.reply_text(result)

# مدیریت پیام‌های غیر از دستورات
def handle_message(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        'دستور ناشناخته است. برای راهنمایی از دستور /help استفاده کنید.'
    )

def main():
    # ایجاد Updater و Dispatcher
    updater = Updater(API_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # افزودن هندلرها
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("chk", chk_command))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    # شروع ربات
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()

# PyPI configuration file
.pypirc
